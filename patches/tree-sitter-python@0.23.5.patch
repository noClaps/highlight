diff --git a/queries/highlights.scm b/queries/highlights.scm
index fdabe26ec62a01d86ff8ab6a92d617ff8d6c3940..238c6c8218b154745c3f6af27ca7b2c8b0fe65ab 100644
--- a/queries/highlights.scm
+++ b/queries/highlights.scm
@@ -1,23 +1,65 @@
-; Identifier naming conventions
+; Identifier naming conventions; these "soft conventions" should stay at the top of the file as they're often overridden
 
-(identifier) @variable
-
-((identifier) @constructor
- (#match? @constructor "^[A-Z]"))
+; CamelCase for classes
+((identifier) @type.class
+  (#match? @type.class "^_*[A-Z][A-Za-z0-9_]*$"))
 
+; ALL_CAPS for constants:
 ((identifier) @constant
- (#match? @constant "^[A-Z][A-Z_]*$"))
+  (#match? @constant "^_*[A-Z][A-Z0-9_]*$"))
 
-; Function calls
+(attribute attribute: (identifier) @property)
+(type (identifier) @type)
+(generic_type (identifier) @type)
+(comment) @comment
+(string) @string
+(escape_sequence) @string.escape
 
-(decorator) @function
+; Type alias
+(type_alias_statement "type" @keyword)
+
+; TypeVar with constraints in type parameters
+(type
+  (tuple (identifier) @type)
+)
+
+; Forward references
+(type
+  (string) @type
+)
+
+
+; Function calls
 
 (call
-  function: (attribute attribute: (identifier) @function.method))
+  function: (attribute attribute: (identifier) @function.method.call))
 (call
-  function: (identifier) @function)
+  function: (identifier) @function.call)
 
-; Builtin functions
+(decorator
+  "@" @punctuation.special
+  [
+    (identifier) @function.decorator
+    (attribute attribute: (identifier) @function.decorator)
+    (call function: (identifier) @function.decorator.call)
+    (call (attribute attribute: (identifier) @function.decorator.call))
+  ])
+
+; Function and class definitions
+
+(function_definition
+  name: (identifier) @function.definition)
+
+; Class definitions and calling: needs to come after the regex matching above
+
+(class_definition
+  name: (identifier) @type.class.definition)
+
+(call
+  function: (identifier) @type.class.call
+  (#match? @type.class.call "^_*[A-Z][A-Za-z0-9_]*$"))
+
+; Builtins
 
 ((call
   function: (identifier) @function.builtin)
@@ -25,13 +67,8 @@
    @function.builtin
    "^(abs|all|any|ascii|bin|bool|breakpoint|bytearray|bytes|callable|chr|classmethod|compile|complex|delattr|dict|dir|divmod|enumerate|eval|exec|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|isinstance|issubclass|iter|len|list|locals|map|max|memoryview|min|next|object|oct|open|ord|pow|print|property|range|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|vars|zip|__import__)$"))
 
-; Function definitions
-
-(function_definition
-  name: (identifier) @function)
-
-(attribute attribute: (identifier) @property)
-(type (identifier) @type)
+((identifier) @type.builtin
+    (#any-of? @type.builtin "int" "float" "complex" "bool" "list" "tuple" "range" "str" "bytes" "bytearray" "memoryview" "set" "frozenset" "dict"))
 
 ; Literals
 
@@ -39,6 +76,7 @@
   (none)
   (true)
   (false)
+  (ellipsis)
 ] @constant.builtin
 
 [
@@ -46,14 +84,66 @@
   (float)
 ] @number
 
-(comment) @comment
-(string) @string
-(escape_sequence) @escape
+; Self references
+
+[
+  (parameters (identifier) @variable.special)
+  (attribute (identifier) @variable.special)
+  (#match? @variable.special "^self|cls$")
+]
+
+[
+  "("
+  ")"
+  "["
+  "]"
+  "{"
+  "}"
+] @punctuation.bracket
 
 (interpolation
   "{" @punctuation.special
   "}" @punctuation.special) @embedded
 
+; Docstrings.
+(function_definition
+  "async"?
+  "def"
+  name: (_)
+  (parameters)?
+  body: (block . (expression_statement (string) @string.doc)))
+
+(class_definition
+  body: (block
+    . (comment) @comment*
+    . (expression_statement (string) @string.doc)))
+
+(module
+  . (comment) @comment*
+  . (expression_statement (string) @string.doc))
+
+(module
+  [
+    (expression_statement (assignment))
+    (type_alias_statement)
+  ]
+  . (expression_statement (string) @string.doc))
+
+(class_definition
+  body: (block
+    (expression_statement (assignment))
+    . (expression_statement (string) @string.doc)))
+
+(class_definition
+  body: (block
+    (function_definition
+      name: (identifier) @function.method.constructor
+      (#eq? @function.method.constructor "__init__")
+      body: (block
+        (expression_statement (assignment))
+        . (expression_statement (string) @string.doc)))))
+
+
 [
   "-"
   "-="
@@ -67,17 +157,14 @@
   "//="
   "/="
   "&"
-  "&="
   "%"
   "%="
   "^"
-  "^="
   "+"
   "->"
   "+="
   "<"
   "<<"
-  "<<="
   "<="
   "<>"
   "="
@@ -86,11 +173,12 @@
   ">"
   ">="
   ">>"
-  ">>="
   "|"
-  "|="
   "~"
-  "@="
+  ":"
+] @operator
+
+[
   "and"
   "in"
   "is"
@@ -98,7 +186,7 @@
   "or"
   "is not"
   "not in"
-] @operator
+] @keyword.operator
 
 [
   "as"
@@ -113,6 +201,7 @@
   "elif"
   "else"
   "except"
+  "except*"
   "exec"
   "finally"
   "for"
@@ -133,3 +222,11 @@
   "match"
   "case"
 ] @keyword
+
+; Punctuation
+
+[
+  ","
+  "."
+  ";"
+] @punctuation.delimiter
