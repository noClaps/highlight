diff --git a/queries/highlights.scm b/queries/highlights.scm
index 48c7284ec2b1cbd57406b24e30c4cb238be6b590..d25b8a734719bacc2eeaffc8874ac21432fc1021 100644
--- a/queries/highlights.scm
+++ b/queries/highlights.scm
@@ -1,161 +1,192 @@
-; Identifiers
-
 (type_identifier) @type
 (primitive_type) @type.builtin
+(self) @variable.special
 (field_identifier) @property
 
-; Identifier conventions
-
-; Assume all-caps names are constants
-((identifier) @constant
- (#match? @constant "^[A-Z][A-Z\\d_]+$'"))
-
-; Assume uppercase names are enum constructors
-((identifier) @constructor
- (#match? @constructor "^[A-Z]"))
-
-; Assume that uppercase names in paths are types
-((scoped_identifier
-  path: (identifier) @type)
- (#match? @type "^[A-Z]"))
-((scoped_identifier
-  path: (scoped_identifier
-    name: (identifier) @type))
- (#match? @type "^[A-Z]"))
-((scoped_type_identifier
-  path: (identifier) @type)
- (#match? @type "^[A-Z]"))
-((scoped_type_identifier
-  path: (scoped_identifier
-    name: (identifier) @type))
- (#match? @type "^[A-Z]"))
+(trait_item name: (type_identifier) @type.interface)
+(impl_item trait: (type_identifier) @type.interface)
+(abstract_type trait: (type_identifier) @type.interface)
+(dynamic_type trait: (type_identifier) @type.interface)
+(trait_bounds (type_identifier) @type.interface)
 
-; Assume all qualified names in struct patterns are enum constructors. (They're
-; either that, or struct names; highlighting both as constructors seems to be
-; the less glaring choice of error, visually.)
-(struct_pattern
-  type: (scoped_type_identifier
-    name: (type_identifier) @constructor))
-
-; Function calls
-
-(call_expression
-  function: (identifier) @function)
 (call_expression
-  function: (field_expression
-    field: (field_identifier) @function.method))
-(call_expression
-  function: (scoped_identifier
-    "::"
-    name: (identifier) @function))
+  function: [
+    (identifier) @function
+    (scoped_identifier
+      name: (identifier) @function)
+    (field_expression
+      field: (field_identifier) @function.method)
+  ])
 
 (generic_function
-  function: (identifier) @function)
-(generic_function
-  function: (scoped_identifier
-    name: (identifier) @function))
-(generic_function
-  function: (field_expression
-    field: (field_identifier) @function.method))
+  function: [
+    (identifier) @function
+    (scoped_identifier
+      name: (identifier) @function)
+    (field_expression
+      field: (field_identifier) @function.method)
+  ])
 
-(macro_invocation
-  macro: (identifier) @function.macro
-  "!" @function.macro)
+(function_item name: (identifier) @function.definition)
+(function_signature_item name: (identifier) @function.definition)
 
-; Function definitions
-
-(function_item (identifier) @function)
-(function_signature_item (identifier) @function)
+(macro_invocation
+  macro: [
+    (identifier) @function.special
+    (scoped_identifier
+      name: (identifier) @function.special)
+  ])
 
-(line_comment) @comment
-(block_comment) @comment
+(macro_definition
+  name: (identifier) @function.special.definition)
 
-(line_comment (doc_comment)) @comment.documentation
-(block_comment (doc_comment)) @comment.documentation
+; Identifier conventions
 
-"(" @punctuation.bracket
-")" @punctuation.bracket
-"[" @punctuation.bracket
-"]" @punctuation.bracket
-"{" @punctuation.bracket
-"}" @punctuation.bracket
+; Assume uppercase names are types/enum-constructors
+((identifier) @type
+ (#match? @type "^[A-Z]"))
 
-(type_arguments
-  "<" @punctuation.bracket
-  ">" @punctuation.bracket)
-(type_parameters
+; Assume all-caps names are constants
+((identifier) @constant
+ (#match? @constant "^_*[A-Z][A-Z\\d_]*$"))
+
+[
+  "("
+  ")"
+  "{"
+  "}"
+  "["
+  "]"
+] @punctuation.bracket
+
+(_
+  .
   "<" @punctuation.bracket
   ">" @punctuation.bracket)
 
-"::" @punctuation.delimiter
-":" @punctuation.delimiter
-"." @punctuation.delimiter
-"," @punctuation.delimiter
-";" @punctuation.delimiter
+[
+  "."
+  ";"
+  ","
+  "::"
+] @punctuation.delimiter
+
+[
+  "#"
+] @punctuation.special
+
+[
+  "as"
+  "async"
+  "await"
+  "break"
+  "const"
+  "continue"
+  "default"
+  "dyn"
+  "else"
+  "enum"
+  "extern"
+  "fn"
+  "for"
+  "if"
+  "impl"
+  "in"
+  "let"
+  "loop"
+  "macro_rules!"
+  "match"
+  "mod"
+  "move"
+  "pub"
+  "ref"
+  "return"
+  "static"
+  "struct"
+  "trait"
+  "type"
+  "union"
+  "unsafe"
+  "use"
+  "where"
+  "while"
+  "yield"
+  (crate)
+  (mutable_specifier)
+  (super)
+] @keyword
+
+[
+  (string_literal)
+  (raw_string_literal)
+  (char_literal)
+] @string
+
+(escape_sequence) @string.escape
+
+[
+  (integer_literal)
+  (float_literal)
+] @number
+
+(boolean_literal) @constant
+
+[
+  (line_comment)
+  (block_comment)
+] @comment
+
+[
+  (line_comment (doc_comment))
+  (block_comment (doc_comment))
+] @comment.doc
+
+[
+  "!="
+  "%"
+  "%="
+  "&"
+  "&="
+  "&&"
+  "*"
+  "*="
+  "+"
+  "+="
+  "-"
+  "-="
+  "->"
+  ".."
+  "..="
+  "..."
+  "/="
+  ":"
+  "<<"
+  "<<="
+  "<"
+  "<="
+  "="
+  "=="
+  "=>"
+  ">"
+  ">="
+  ">>"
+  ">>="
+  "@"
+  "^"
+  "^="
+  "|"
+  "|="
+  "||"
+  "?"
+] @operator
+
+; Avoid highlighting these as operators when used in doc comments.
+(unary_expression "!" @operator)
+operator: "/" @operator
+
+(lifetime) @lifetime
 
 (parameter (identifier) @variable.parameter)
 
-(lifetime (identifier) @label)
-
-"as" @keyword
-"async" @keyword
-"await" @keyword
-"break" @keyword
-"const" @keyword
-"continue" @keyword
-"default" @keyword
-"dyn" @keyword
-"else" @keyword
-"enum" @keyword
-"extern" @keyword
-"fn" @keyword
-"for" @keyword
-"gen" @keyword
-"if" @keyword
-"impl" @keyword
-"in" @keyword
-"let" @keyword
-"loop" @keyword
-"macro_rules!" @keyword
-"match" @keyword
-"mod" @keyword
-"move" @keyword
-"pub" @keyword
-"raw" @keyword
-"ref" @keyword
-"return" @keyword
-"static" @keyword
-"struct" @keyword
-"trait" @keyword
-"type" @keyword
-"union" @keyword
-"unsafe" @keyword
-"use" @keyword
-"where" @keyword
-"while" @keyword
-"yield" @keyword
-(crate) @keyword
-(mutable_specifier) @keyword
-(use_list (self) @keyword)
-(scoped_use_list (self) @keyword)
-(scoped_identifier (self) @keyword)
-(super) @keyword
-
-(self) @variable.builtin
-
-(char_literal) @string
-(string_literal) @string
-(raw_string_literal) @string
-
-(boolean_literal) @constant.builtin
-(integer_literal) @constant.builtin
-(float_literal) @constant.builtin
-
-(escape_sequence) @escape
-
 (attribute_item) @attribute
 (inner_attribute_item) @attribute
-
-"*" @operator
-"&" @operator
-"'" @operator
