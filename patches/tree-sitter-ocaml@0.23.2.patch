diff --git a/queries/highlights.scm b/queries/highlights.scm
index 8f73a9fb4a1323e81d33d715a1892a9314fb22fe..8029d3cc22edcffbfcac1ed5006c27e7c7487a7f 100644
--- a/queries/highlights.scm
+++ b/queries/highlights.scm
@@ -1,145 +1,155 @@
-; Punctuation
-;------------
-
-[
-  "," "." ";" ":" "=" "|" "~" "?" "+" "-" "!" ">" "&"
-  "->" ";;" ":>" "+=" ":=" ".."
-] @punctuation.delimiter
-
-["(" ")" "[" "]" "{" "}" "[|" "|]" "[<" "[>"] @punctuation.bracket
-
-(object_type ["<" ">"] @punctuation.bracket)
+; Modules
+;--------
 
-"%" @punctuation.special
+[(module_name) (module_type_name)] @title
 
-(attribute ["[@" "]"] @punctuation.special)
-(item_attribute ["[@@" "]"] @punctuation.special)
-(floating_attribute ["[@@@" "]"] @punctuation.special)
-(extension ["[%" "]"] @punctuation.special)
-(item_extension ["[%%" "]"] @punctuation.special)
-(quoted_extension ["{%" "}"] @punctuation.special)
-(quoted_item_extension ["{%%" "}"] @punctuation.special)
+; Types
+;------
 
-; Keywords
-;---------
+[(class_name) (class_type_name) (type_constructor)] @type
 
-[
-  "and" "as" "assert" "begin" "class" "constraint" "do" "done" "downto" "effect"
-  "else" "end" "exception" "external" "for" "fun" "function" "functor" "if" "in"
-  "include" "inherit" "initializer" "lazy" "let" "match" "method" "module"
-  "mutable" "new" "nonrec" "object" "of" "open" "private" "rec" "sig" "struct"
-  "then" "to" "try" "type" "val" "virtual" "when" "while" "with"
-] @keyword
+(tag) @variant ;; Polymorphic Variants
+(constructor_name) @constructor ;; Exceptions, variants and the like
 
-; Operators
+; Functions
 ;----------
 
-[
-  (prefix_operator)
-  (sign_operator)
-  (pow_operator)
-  (mult_operator)
-  (add_operator)
-  (concat_operator)
-  (rel_operator)
-  (and_operator)
-  (or_operator)
-  (assign_operator)
-  (hash_operator)
-  (indexing_operator)
-  (let_operator)
-  (let_and_operator)
-  (match_operator)
-] @operator
-
-(match_expression (match_operator) @keyword)
-
-(value_definition [(let_operator) (let_and_operator)] @keyword)
-
-["*" "#" "::" "<-"] @operator
+(let_binding
+  pattern: (value_name) @function
+  (parameter))
 
-; Constants
-;----------
+(let_binding
+  pattern: (value_name) @function
+  body: [(fun_expression) (function_expression)])
 
-(boolean) @constant
+(value_specification (value_name) @function)
 
-[(number) (signed_number)] @number
+(external (value_name) @function)
 
-[(string) (character)] @string
+(method_name) @function
 
-(quoted_string "{" @string "}" @string) @string
+(infix_expression
+  left: (value_path (value_name) @function)
+  operator: (concat_operator) @operator
+  (#eq? @operator "@@"))
 
-(escape_sequence) @escape
+(infix_expression
+  operator: (rel_operator) @operator
+  right: (value_path (value_name) @function)
+  (#eq? @operator "|>"))
 
-(conversion_specification) @string.special
+(application_expression
+  function: (value_path (value_name) @function))
 
 ; Variables
 ;----------
 
-[(value_name) (type_variable)] @variable
+(value_pattern) @variable
 
-(value_pattern) @variable.parameter
+(type_variable) @variable.special
 
 ; Properties
 ;-----------
 
-[(label_name) (field_name) (instance_variable_name)] @property
+[(field_name) (instance_variable_name)] @property
 
-; Functions
+; Labels
+;-------
+
+[(label_name) (parameter)] @label
+
+(parameter
+    pattern: (value_pattern) @label)
+; despite the above rule, we should still label value_pattern as a variable
+; when a label name is present
+(parameter
+    (label_name)
+    pattern: (value_pattern) @variable)
+
+; Constants
 ;----------
 
-(let_binding
-  pattern: (value_name) @function
-  (parameter))
+(boolean) @boolean
 
-(let_binding
-  pattern: (value_name) @function
-  body: [(fun_expression) (function_expression)])
+[(number) (signed_number)] @number
 
-(value_specification (value_name) @function)
+[(string) (character)] @string
 
-(external (value_name) @function)
+(quoted_string "{" @string "}" @string) @string
+(quoted_string_content) @string
 
-(method_name) @function.method
 
-(application_expression
-  function: (value_path (value_name) @function))
+(escape_sequence) @string.escape
 
-(infix_expression
-  left: (value_path (value_name) @function)
-  operator: (concat_operator) @operator
-  (#eq? @operator "@@"))
+[
+  (conversion_specification)
+  (pretty_printing_indication)
+] @punctuation.special
 
-(infix_expression
-  operator: (rel_operator) @operator
-  right: (value_path (value_name) @function)
-  (#eq? @operator "|>"))
+; Operators
+;----------
 
-(
-  (value_name) @function.builtin
-  (#match? @function.builtin "^(raise(_notrace)?|failwith|invalid_arg)$")
-)
+(match_expression (match_operator) @keyword)
 
-; Types
-;------
+(value_definition [(let_operator) (let_and_operator)] @keyword)
 
-[(class_name) (class_type_name) (type_constructor)] @type
+[
+  (prefix_operator)
+  (sign_operator)
+  (pow_operator)
+  (mult_operator)
+  (add_operator)
+  (concat_operator)
+  (rel_operator)
+  (and_operator)
+  (or_operator)
+  (assign_operator)
+  (hash_operator)
+  (indexing_operator)
+  (let_operator)
+  (let_and_operator)
+  (match_operator)
+] @operator
 
-(
-  (type_constructor) @type.builtin
-  (#match? @type.builtin "^(int|char|bytes|string|float|bool|unit|exn|array|list|option|int32|int64|nativeint|format6|lazy_t)$")
-)
+["*" "#" "::" "<-"] @operator
 
-[(constructor_name) (tag)] @constructor
+; Keywords
+;---------
 
-; Modules
-;--------
+[
+  "and" "as" "assert" "begin" "class" "constraint" "do" "done" "downto" "else"
+  "end" "exception" "external" "for" "fun" "function" "functor" "if" "in"
+  "include" "inherit" "initializer" "lazy" "let" "match" "method" "module"
+  "mutable" "new" "nonrec" "object" "of" "open" "private" "rec" "sig" "struct"
+  "then" "to" "try" "type" "val" "virtual" "when" "while" "with"
+] @keyword
 
-[(module_name) (module_type_name)] @module
+; Punctuation
+;------------
+
+["(" ")" "[" "]" "{" "}" "[|" "|]" "[<" "[>" "[@@" "[@" "[%"] @punctuation.bracket
+
+(object_type ["<" ">"] @punctuation.bracket)
+
+[
+  "," "." ";" ":" "=" "|" "~" "?" "+" "-" "!" ">" "&"
+  "->" ";;" ":>" "+=" ":=" ".."
+] @punctuation.delimiter
 
 ; Attributes
 ;-----------
 
+[
+  (attribute)
+  (item_attribute)
+  (floating_attribute)
+  (extension)
+  (item_extension)
+  (quoted_extension)
+  (quoted_item_extension)
+
+] @attribute
+
 (attribute_id) @tag
 
 ; Comments
